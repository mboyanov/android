package com.hellogoogleio;



import android.app.Activity;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.os.Bundle;
import android.util.AttributeSet;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;


public class HelloGoogleIOActivity extends Activity {

	private Paint paint = new Paint(Color.GREEN);

	private float initX, initY;
	private boolean drawing = false;

	public class MySurfaceThread extends Thread {

		private SurfaceHolder myThreadSurfaceHolder;
		private MySurfaceView myThreadSurfaceView;
		private boolean myThreadRun = false;

		public MySurfaceThread(SurfaceHolder surfaceHolder,
				MySurfaceView surfaceView) {
			myThreadSurfaceHolder = surfaceHolder;
			myThreadSurfaceView = surfaceView;
		}

		public void setRunning(boolean b) {
			myThreadRun = b;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			// super.run();
			while (myThreadRun) {
				Canvas c = null;
				try {
					c = myThreadSurfaceHolder.lockCanvas(null);
					synchronized (myThreadSurfaceHolder) {
						myThreadSurfaceView.onDraw(c);
					}
				} finally {
					// do this in a finally so that if an exception is thrown
					// during the above, we don't leave the Surface in an
					// inconsistent state
					if (c != null) {
						myThreadSurfaceHolder.unlockCanvasAndPost(c);
					}
				}
			}
		}
	}

	public class MySurfaceView extends SurfaceView implements
			SurfaceHolder.Callback {
		private int width, height;
		private MySurfaceThread thread;
		private float t = 50;
		private float z = 50;
		private Bitmap[] frames=new Bitmap[20];
		private float speed = 2;
		private Ball ball = new Ball(t, z,frames,width,height);
		private Ledge[] ledges = new Ledge[10];
		private long time = 0;
		private int score = 0;
		private long lastupdate = 0;
		private int collision = 0;
		private int state=0;
		private int dist;
		public int currentstate=0;
	    public static final int PLAY=0;
	    public static final int PAUSE=2;
	    public static final int DEAD=1;
		private float speedbeforepause;
		@Override
		protected void onDraw(Canvas canvas) {
			if (state==PAUSE) {
				canvas.drawColor(Color.BLACK,Mode.DARKEN);
				ball.drawBall(canvas, ball.x,ball.y, paint, collision, speed, PAUSE);
				for (int i = 0; i < 10; i++) ledges[i].drawLedge(canvas, paint, width, height, speed);
				}
			else if (drawing) {
				if (state==DEAD) {
					canvas.drawColor(Color.BLACK, Mode.DARKEN);
					canvas.drawText("GAME OVER!", width/4, height/3, paint);
					canvas.drawText("Score:"+Integer.toString(score), width/4, height/3+height/20, paint);
					paint.setTextSize(height/20);
					canvas.drawText("Tap to restart", width/4, height/3+height/10, paint);
				}
				else{
				canvas.drawColor(Color.BLACK, Mode.DARKEN);
				collision = ball.detectCollisions(ledges);
				state=ball.drawBall(canvas, initX, initY, paint, collision, speed,state);
				crystal.drawCrystal(canvas, paint);
				for (int i = 0; i < 10; i++) ledges[i].drawLedge(canvas, paint, width, height, speed);

				long t = System.currentTimeMillis();
				if (t - time > 1000) {
					score++;
					time = t;
				}
				if (t - lastupdate > 10000) {
					speed++;
					lastupdate = t;
				}
				paint.setTextSize(24);
				canvas.drawText(Integer.toString(score), 200, 30, paint);
				}
			}
		}

		@Override
		public boolean onTouchEvent(MotionEvent event) { // hva6ta touch
															// eventite
			// TODO Auto-generated method stub
			// return super.onTouchEvent(event);
			int action = event.getAction();
			if (action == MotionEvent.ACTION_MOVE) { // tova e za drag i drop
				// float x = event.getX();
				// float y = event.getY();
				// radius = (float) Math.sqrt(Math.pow(x-initX, 2) +
				// Math.pow(y-initY, 2));
			} else if (action == MotionEvent.ACTION_DOWN) { // tva e pri tap
				initX = event.getX();
				initY = event.getY();
				// radius = 1;
				drawing = true;
				if (state==1) restart();
			} else if (action == MotionEvent.ACTION_UP) { // tova e otpuskane
				// drawing = false;
			}

			return true;
		}
		private void restart(){
			for (int i=0;i<10;i++)
				ledges[i]=new Ledge((float) ((Math.random()-0.3)*width),dist*(i+1));
			ball = new Ball(t, z,frames,width,height);
			state=0;
			score=0;
			speed=2;
		}
		public MySurfaceView(Context context) {
			super(context);
			// TODO Auto-generated constructor stub
			init();
		}

		public MySurfaceView(Context context, AttributeSet attrs) {
			super(context, attrs);
			// TODO Auto-generated constructor stub
			init();
		}

		public Crystal crystal;

		public MySurfaceView(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
			// TODO Auto-generated constructor stub
			
			
			init();
		}

		private void init() {
			Resources res = this.getResources();
			Bitmap b = BitmapFactory.decodeResource(res, R.drawable.crystal);
			int x=R.drawable.frame0;
			for (int i=0;i<10;i++) {Bitmap t=BitmapFactory.decodeResource(res,x+i);Log.d("frame",Integer.toString(i));
				frames[i]=Bitmap.createScaledBitmap(t, 40, 40, false);}
			x=R.drawable.rframe0;
			for (int i=0;i<10;i++) {Bitmap t=BitmapFactory.decodeResource(res,x+i);Log.d("frame",Integer.toString(i));
			frames[i+10]=Bitmap.createScaledBitmap(t, 40, 40, false);}
			
			
			Log.d("inicializirame", "init");
			getHolder().addCallback(this);
			thread = new MySurfaceThread(getHolder(), this);
			Display display = getWindowManager().getDefaultDisplay();
			width = display.getWidth();
			height = display.getHeight();
			b = Bitmap.createScaledBitmap(b, height / 50, height / 50, false);
			crystal = new Crystal(20, 20, b);
			setFocusable(true);
			dist = height / 6;// make sure we get key events
			for (int i=0;i<10;i++)
				ledges[i]=new Ledge((float) ((Math.random()-0.3)*width),dist*(i+1));
			ball = new Ball(t, z,frames,width,height);
			paint.setStyle(Paint.Style.STROKE);
			paint.setStrokeWidth(3);
			paint.setColor(Color.WHITE);
		
		}

		@Override
		public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2,
				int arg3) {
			// TODO Auto-generated method stub
		}

		@Override
		public void surfaceCreated(SurfaceHolder holder) {
			// TODO Auto-generated method stub
		//	thread.setRunning(true);
		//	thread.start();
			Log.d("created","created");
			if (thread.getState()==Thread.State.TERMINATED) { 
	               thread = new MySurfaceThread(getHolder(),this);
	          }
	          thread.setRunning(true);
	          thread.start();
		}

		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
			// TODO Auto-generated method stub
			boolean retry = true;
			thread.setRunning(false);
			while (retry) {
				try {
					thread.join();
					retry = false;
				} catch (InterruptedException e) {
				}
			}
		}
	}
public EditText et;
Button button2,button3;
MySurfaceView mySurfaceView;
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.main);
		RelativeLayout fl =new RelativeLayout(this);
		
		
		button2=new Button(this);
		button2.setText("Resume");
		button3=new Button(this);
		button3.setText("Res3ume");
	//	et=new EditText(this);
		mySurfaceView = new MySurfaceView(this);
	//	mySurfaceView.setBackgroundColor(Color.LTGRAY);
		fl.addView(mySurfaceView);
		//et.setSingleLine();
		//fl.addView(et);
		LayoutParams params=new LayoutParams(240, 60);
		params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
		LayoutParams params1=new LayoutParams(240, 60);
		
		
	//	params.addRule(RelativeLayout.CENTER_HORIZONTAL);
		params1.addRule(RelativeLayout.CENTER_VERTICAL);
		params1.addRule(RelativeLayout.CENTER_HORIZONTAL);
		LayoutParams params2=new LayoutParams(240, 60);
		button2.setId(4);
		button2.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                mySurfaceView.state=MySurfaceView.PLAY;
                mySurfaceView.speed=mySurfaceView.speedbeforepause;
                button2.setVisibility(View.INVISIBLE);
            }
		});
		//fl.addView(et, 1);
		fl.addView(button2,params1);
		params2.addRule(RelativeLayout.BELOW,button2.getId());
		params2.addRule(RelativeLayout.CENTER_HORIZONTAL);
		
		
		//fl.addView(button3,params2);
		fl.addView(button3, params2);
		button3.setVisibility(View.INVISIBLE);
		button2.setVisibility(View.INVISIBLE);
		setContentView(fl);
		
		
	}
	@Override
	public void onResume()
	{
		drawing=true;
		Log.d("resuming","resuming");
	    super.onResume();
	    
	}
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
        
		if (keyCode == KeyEvent.KEYCODE_MENU && event.getAction()==KeyEvent.ACTION_DOWN && mySurfaceView.state!=MySurfaceView.PAUSE) {
        	 mySurfaceView.state=MySurfaceView.PAUSE;
             button2.setVisibility(View.VISIBLE);
             mySurfaceView.speedbeforepause=mySurfaceView.speed;
             mySurfaceView.speed=0;
         }
		else super.onKeyDown(keyCode, event);
         return true;
     }
	@Override
	public void onPause()
	{
	    drawing=false;
		Log.d("pausing","pausing");
//		button2.setVisibility(View.VISIBLE);
		super.onPause();
		
	   }
}